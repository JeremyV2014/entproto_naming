// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/bug/ent/predicate"
	"entgo.io/bug/ent/twoword"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TwoWordUpdate is the builder for updating TwoWord entities.
type TwoWordUpdate struct {
	config
	hooks    []Hook
	mutation *TwoWordMutation
}

// Where appends a list predicates to the TwoWordUpdate builder.
func (twu *TwoWordUpdate) Where(ps ...predicate.TwoWord) *TwoWordUpdate {
	twu.mutation.Where(ps...)
	return twu
}

// SetEnums sets the "enums" field.
func (twu *TwoWordUpdate) SetEnums(t twoword.Enums) *TwoWordUpdate {
	twu.mutation.SetEnums(t)
	return twu
}

// SetNillableEnums sets the "enums" field if the given value is not nil.
func (twu *TwoWordUpdate) SetNillableEnums(t *twoword.Enums) *TwoWordUpdate {
	if t != nil {
		twu.SetEnums(*t)
	}
	return twu
}

// Mutation returns the TwoWordMutation object of the builder.
func (twu *TwoWordUpdate) Mutation() *TwoWordMutation {
	return twu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (twu *TwoWordUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(twu.hooks) == 0 {
		if err = twu.check(); err != nil {
			return 0, err
		}
		affected, err = twu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TwoWordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = twu.check(); err != nil {
				return 0, err
			}
			twu.mutation = mutation
			affected, err = twu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(twu.hooks) - 1; i >= 0; i-- {
			if twu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = twu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, twu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (twu *TwoWordUpdate) SaveX(ctx context.Context) int {
	affected, err := twu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (twu *TwoWordUpdate) Exec(ctx context.Context) error {
	_, err := twu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (twu *TwoWordUpdate) ExecX(ctx context.Context) {
	if err := twu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (twu *TwoWordUpdate) check() error {
	if v, ok := twu.mutation.Enums(); ok {
		if err := twoword.EnumsValidator(v); err != nil {
			return &ValidationError{Name: "enums", err: fmt.Errorf(`ent: validator failed for field "TwoWord.enums": %w`, err)}
		}
	}
	return nil
}

func (twu *TwoWordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   twoword.Table,
			Columns: twoword.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: twoword.FieldID,
			},
		},
	}
	if ps := twu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := twu.mutation.Enums(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: twoword.FieldEnums,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, twu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{twoword.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// TwoWordUpdateOne is the builder for updating a single TwoWord entity.
type TwoWordUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TwoWordMutation
}

// SetEnums sets the "enums" field.
func (twuo *TwoWordUpdateOne) SetEnums(t twoword.Enums) *TwoWordUpdateOne {
	twuo.mutation.SetEnums(t)
	return twuo
}

// SetNillableEnums sets the "enums" field if the given value is not nil.
func (twuo *TwoWordUpdateOne) SetNillableEnums(t *twoword.Enums) *TwoWordUpdateOne {
	if t != nil {
		twuo.SetEnums(*t)
	}
	return twuo
}

// Mutation returns the TwoWordMutation object of the builder.
func (twuo *TwoWordUpdateOne) Mutation() *TwoWordMutation {
	return twuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (twuo *TwoWordUpdateOne) Select(field string, fields ...string) *TwoWordUpdateOne {
	twuo.fields = append([]string{field}, fields...)
	return twuo
}

// Save executes the query and returns the updated TwoWord entity.
func (twuo *TwoWordUpdateOne) Save(ctx context.Context) (*TwoWord, error) {
	var (
		err  error
		node *TwoWord
	)
	if len(twuo.hooks) == 0 {
		if err = twuo.check(); err != nil {
			return nil, err
		}
		node, err = twuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TwoWordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = twuo.check(); err != nil {
				return nil, err
			}
			twuo.mutation = mutation
			node, err = twuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(twuo.hooks) - 1; i >= 0; i-- {
			if twuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = twuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, twuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (twuo *TwoWordUpdateOne) SaveX(ctx context.Context) *TwoWord {
	node, err := twuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (twuo *TwoWordUpdateOne) Exec(ctx context.Context) error {
	_, err := twuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (twuo *TwoWordUpdateOne) ExecX(ctx context.Context) {
	if err := twuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (twuo *TwoWordUpdateOne) check() error {
	if v, ok := twuo.mutation.Enums(); ok {
		if err := twoword.EnumsValidator(v); err != nil {
			return &ValidationError{Name: "enums", err: fmt.Errorf(`ent: validator failed for field "TwoWord.enums": %w`, err)}
		}
	}
	return nil
}

func (twuo *TwoWordUpdateOne) sqlSave(ctx context.Context) (_node *TwoWord, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   twoword.Table,
			Columns: twoword.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: twoword.FieldID,
			},
		},
	}
	id, ok := twuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TwoWord.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := twuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, twoword.FieldID)
		for _, f := range fields {
			if !twoword.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != twoword.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := twuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := twuo.mutation.Enums(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: twoword.FieldEnums,
		})
	}
	_node = &TwoWord{config: twuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, twuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{twoword.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/bug/ent/twoword"
	"entgo.io/ent/dialect/sql"
)

// TwoWord is the model entity for the TwoWord schema.
type TwoWord struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Enums holds the value of the "enums" field.
	Enums twoword.Enums `json:"enums,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TwoWord) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case twoword.FieldID:
			values[i] = new(sql.NullInt64)
		case twoword.FieldEnums:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TwoWord", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TwoWord fields.
func (tw *TwoWord) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case twoword.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tw.ID = int(value.Int64)
		case twoword.FieldEnums:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field enums", values[i])
			} else if value.Valid {
				tw.Enums = twoword.Enums(value.String)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this TwoWord.
// Note that you need to call TwoWord.Unwrap() before calling this method if this TwoWord
// was returned from a transaction, and the transaction was committed or rolled back.
func (tw *TwoWord) Update() *TwoWordUpdateOne {
	return (&TwoWordClient{config: tw.config}).UpdateOne(tw)
}

// Unwrap unwraps the TwoWord entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tw *TwoWord) Unwrap() *TwoWord {
	tx, ok := tw.config.driver.(*txDriver)
	if !ok {
		panic("ent: TwoWord is not a transactional entity")
	}
	tw.config.driver = tx.drv
	return tw
}

// String implements the fmt.Stringer.
func (tw *TwoWord) String() string {
	var builder strings.Builder
	builder.WriteString("TwoWord(")
	builder.WriteString(fmt.Sprintf("id=%v", tw.ID))
	builder.WriteString(", enums=")
	builder.WriteString(fmt.Sprintf("%v", tw.Enums))
	builder.WriteByte(')')
	return builder.String()
}

// TwoWords is a parsable slice of TwoWord.
type TwoWords []*TwoWord

func (tw TwoWords) config(cfg config) {
	for _i := range tw {
		tw[_i].config = cfg
	}
}

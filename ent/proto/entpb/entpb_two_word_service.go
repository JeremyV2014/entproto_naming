// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpb

import (
	context "context"
	ent "entgo.io/bug/ent"
	two_word "entgo.io/bug/ent/two_word"
	twoword "entgo.io/bug/ent/twoword"
	sqlgraph "entgo.io/ent/dialect/sql/sqlgraph"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	strings "strings"
)

// TwoWordService implements TwoWordServiceServer
type TwoWordService struct {
	client *ent.Client
	UnimplementedTwoWordServiceServer
}

// NewTwoWordService returns a new TwoWordService
func NewTwoWordService(client *ent.Client) *TwoWordService {
	return &TwoWordService{
		client: client,
	}
}

func toProtoTwoWord_Enums(e two_word.Enums) TwoWord_Enums {
	if v, ok := TwoWord_Enums_value[strings.ToUpper(string(e))]; ok {
		return TwoWord_Enums(v)
	}
	return TwoWord_Enums(0)
}

func toEntTwoWord_Enums(e TwoWord_Enums) two_word.Enums {
	if v, ok := TwoWord_Enums_name[int32(e)]; ok {
		return two_word.Enums(strings.ToLower(v))
	}
	return ""
}

// toProtoTwoWord transforms the ent type to the pb type
func toProtoTwoWord(e *ent.TwoWord) (*TwoWord, error) {
	v := &TwoWord{}
	enums := toProtoTwoWord_Enums(e.Enums)
	v.Enums = enums
	id := int32(e.ID)
	v.Id = id
	return v, nil
}

// Create implements TwoWordServiceServer.Create
func (svc *TwoWordService) Create(ctx context.Context, req *CreateTwoWordRequest) (*TwoWord, error) {
	twoword := req.GetTwoWord()
	m := svc.client.TwoWord.Create()
	twowordEnums := toEntTwoWord_Enums(twoword.GetEnums())
	m.SetEnums(twowordEnums)
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoTwoWord(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Get implements TwoWordServiceServer.Get
func (svc *TwoWordService) Get(ctx context.Context, req *GetTwoWordRequest) (*TwoWord, error) {
	var (
		err error
		get *ent.TwoWord
	)
	id := int(req.GetId())
	switch req.GetView() {
	case GetTwoWordRequest_VIEW_UNSPECIFIED, GetTwoWordRequest_BASIC:
		get, err = svc.client.TwoWord.Get(ctx, id)
	case GetTwoWordRequest_WITH_EDGE_IDS:
		get, err = svc.client.TwoWord.Query().
			Where(twoword.ID(id)).
			Only(ctx)
	default:
		return nil, status.Error(codes.InvalidArgument, "invalid argument: unknown view")
	}
	switch {
	case err == nil:
		return toProtoTwoWord(get)
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}
	return nil, nil

}

// Update implements TwoWordServiceServer.Update
func (svc *TwoWordService) Update(ctx context.Context, req *UpdateTwoWordRequest) (*TwoWord, error) {
	twoword := req.GetTwoWord()
	twowordID := int(twoword.GetId())
	m := svc.client.TwoWord.UpdateOneID(twowordID)
	twowordEnums := toEntTwoWord_Enums(twoword.GetEnums())
	m.SetEnums(twowordEnums)
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoTwoWord(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Delete implements TwoWordServiceServer.Delete
func (svc *TwoWordService) Delete(ctx context.Context, req *DeleteTwoWordRequest) (*emptypb.Empty, error) {
	var err error
	id := int(req.GetId())
	err = svc.client.TwoWord.DeleteOneID(id).Exec(ctx)
	switch {
	case err == nil:
		return &emptypb.Empty{}, nil
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

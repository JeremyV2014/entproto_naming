// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package entpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TwoWordServiceClient is the client API for TwoWordService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TwoWordServiceClient interface {
	Create(ctx context.Context, in *CreateTwoWordRequest, opts ...grpc.CallOption) (*TwoWord, error)
	Get(ctx context.Context, in *GetTwoWordRequest, opts ...grpc.CallOption) (*TwoWord, error)
	Update(ctx context.Context, in *UpdateTwoWordRequest, opts ...grpc.CallOption) (*TwoWord, error)
	Delete(ctx context.Context, in *DeleteTwoWordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type twoWordServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTwoWordServiceClient(cc grpc.ClientConnInterface) TwoWordServiceClient {
	return &twoWordServiceClient{cc}
}

func (c *twoWordServiceClient) Create(ctx context.Context, in *CreateTwoWordRequest, opts ...grpc.CallOption) (*TwoWord, error) {
	out := new(TwoWord)
	err := c.cc.Invoke(ctx, "/entpb.TwoWordService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twoWordServiceClient) Get(ctx context.Context, in *GetTwoWordRequest, opts ...grpc.CallOption) (*TwoWord, error) {
	out := new(TwoWord)
	err := c.cc.Invoke(ctx, "/entpb.TwoWordService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twoWordServiceClient) Update(ctx context.Context, in *UpdateTwoWordRequest, opts ...grpc.CallOption) (*TwoWord, error) {
	out := new(TwoWord)
	err := c.cc.Invoke(ctx, "/entpb.TwoWordService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twoWordServiceClient) Delete(ctx context.Context, in *DeleteTwoWordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/entpb.TwoWordService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TwoWordServiceServer is the server API for TwoWordService service.
// All implementations must embed UnimplementedTwoWordServiceServer
// for forward compatibility
type TwoWordServiceServer interface {
	Create(context.Context, *CreateTwoWordRequest) (*TwoWord, error)
	Get(context.Context, *GetTwoWordRequest) (*TwoWord, error)
	Update(context.Context, *UpdateTwoWordRequest) (*TwoWord, error)
	Delete(context.Context, *DeleteTwoWordRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedTwoWordServiceServer()
}

// UnimplementedTwoWordServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTwoWordServiceServer struct {
}

func (UnimplementedTwoWordServiceServer) Create(context.Context, *CreateTwoWordRequest) (*TwoWord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedTwoWordServiceServer) Get(context.Context, *GetTwoWordRequest) (*TwoWord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedTwoWordServiceServer) Update(context.Context, *UpdateTwoWordRequest) (*TwoWord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedTwoWordServiceServer) Delete(context.Context, *DeleteTwoWordRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedTwoWordServiceServer) mustEmbedUnimplementedTwoWordServiceServer() {}

// UnsafeTwoWordServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TwoWordServiceServer will
// result in compilation errors.
type UnsafeTwoWordServiceServer interface {
	mustEmbedUnimplementedTwoWordServiceServer()
}

func RegisterTwoWordServiceServer(s grpc.ServiceRegistrar, srv TwoWordServiceServer) {
	s.RegisterService(&TwoWordService_ServiceDesc, srv)
}

func _TwoWordService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTwoWordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwoWordServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.TwoWordService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwoWordServiceServer).Create(ctx, req.(*CreateTwoWordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwoWordService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTwoWordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwoWordServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.TwoWordService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwoWordServiceServer).Get(ctx, req.(*GetTwoWordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwoWordService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTwoWordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwoWordServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.TwoWordService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwoWordServiceServer).Update(ctx, req.(*UpdateTwoWordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwoWordService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTwoWordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwoWordServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.TwoWordService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwoWordServiceServer).Delete(ctx, req.(*DeleteTwoWordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TwoWordService_ServiceDesc is the grpc.ServiceDesc for TwoWordService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TwoWordService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "entpb.TwoWordService",
	HandlerType: (*TwoWordServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _TwoWordService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _TwoWordService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _TwoWordService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _TwoWordService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "entpb/entpb.proto",
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/bug/ent/twoword"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TwoWordCreate is the builder for creating a TwoWord entity.
type TwoWordCreate struct {
	config
	mutation *TwoWordMutation
	hooks    []Hook
}

// SetEnums sets the "enums" field.
func (twc *TwoWordCreate) SetEnums(t twoword.Enums) *TwoWordCreate {
	twc.mutation.SetEnums(t)
	return twc
}

// SetNillableEnums sets the "enums" field if the given value is not nil.
func (twc *TwoWordCreate) SetNillableEnums(t *twoword.Enums) *TwoWordCreate {
	if t != nil {
		twc.SetEnums(*t)
	}
	return twc
}

// Mutation returns the TwoWordMutation object of the builder.
func (twc *TwoWordCreate) Mutation() *TwoWordMutation {
	return twc.mutation
}

// Save creates the TwoWord in the database.
func (twc *TwoWordCreate) Save(ctx context.Context) (*TwoWord, error) {
	var (
		err  error
		node *TwoWord
	)
	twc.defaults()
	if len(twc.hooks) == 0 {
		if err = twc.check(); err != nil {
			return nil, err
		}
		node, err = twc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TwoWordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = twc.check(); err != nil {
				return nil, err
			}
			twc.mutation = mutation
			if node, err = twc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(twc.hooks) - 1; i >= 0; i-- {
			if twc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = twc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, twc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (twc *TwoWordCreate) SaveX(ctx context.Context) *TwoWord {
	v, err := twc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (twc *TwoWordCreate) Exec(ctx context.Context) error {
	_, err := twc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (twc *TwoWordCreate) ExecX(ctx context.Context) {
	if err := twc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (twc *TwoWordCreate) defaults() {
	if _, ok := twc.mutation.Enums(); !ok {
		v := twoword.DefaultEnums
		twc.mutation.SetEnums(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (twc *TwoWordCreate) check() error {
	if _, ok := twc.mutation.Enums(); !ok {
		return &ValidationError{Name: "enums", err: errors.New(`ent: missing required field "TwoWord.enums"`)}
	}
	if v, ok := twc.mutation.Enums(); ok {
		if err := twoword.EnumsValidator(v); err != nil {
			return &ValidationError{Name: "enums", err: fmt.Errorf(`ent: validator failed for field "TwoWord.enums": %w`, err)}
		}
	}
	return nil
}

func (twc *TwoWordCreate) sqlSave(ctx context.Context) (*TwoWord, error) {
	_node, _spec := twc.createSpec()
	if err := sqlgraph.CreateNode(ctx, twc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (twc *TwoWordCreate) createSpec() (*TwoWord, *sqlgraph.CreateSpec) {
	var (
		_node = &TwoWord{config: twc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: twoword.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: twoword.FieldID,
			},
		}
	)
	if value, ok := twc.mutation.Enums(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: twoword.FieldEnums,
		})
		_node.Enums = value
	}
	return _node, _spec
}

// TwoWordCreateBulk is the builder for creating many TwoWord entities in bulk.
type TwoWordCreateBulk struct {
	config
	builders []*TwoWordCreate
}

// Save creates the TwoWord entities in the database.
func (twcb *TwoWordCreateBulk) Save(ctx context.Context) ([]*TwoWord, error) {
	specs := make([]*sqlgraph.CreateSpec, len(twcb.builders))
	nodes := make([]*TwoWord, len(twcb.builders))
	mutators := make([]Mutator, len(twcb.builders))
	for i := range twcb.builders {
		func(i int, root context.Context) {
			builder := twcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TwoWordMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, twcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, twcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, twcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (twcb *TwoWordCreateBulk) SaveX(ctx context.Context) []*TwoWord {
	v, err := twcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (twcb *TwoWordCreateBulk) Exec(ctx context.Context) error {
	_, err := twcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (twcb *TwoWordCreateBulk) ExecX(ctx context.Context) {
	if err := twcb.Exec(ctx); err != nil {
		panic(err)
	}
}
